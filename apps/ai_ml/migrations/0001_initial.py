# Generated by Django 4.2.7 on 2025-09-10 18:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0003_alter_course_options_course_updated_at'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('assignments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Model Name')),
                ('model_type', models.CharField(choices=[('performance_prediction', 'Student Performance Prediction'), ('course_recommendation', 'Course Recommendation'), ('grading_assistance', 'Automated Grading Assistance'), ('anomaly_detection', 'Anomaly Detection'), ('scheduling', 'Intelligent Scheduling'), ('nlp_feedback', 'NLP Feedback Analysis')], max_length=50, verbose_name='Model Type')),
                ('version', models.CharField(max_length=50, verbose_name='Version')),
                ('status', models.CharField(choices=[('training', 'Training'), ('ready', 'Ready'), ('failed', 'Failed'), ('deprecated', 'Deprecated')], default='training', max_length=20)),
                ('accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('precision', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('recall', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('f1_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('training_data_size', models.IntegerField(default=0)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('model_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('scaler_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('hyperparameters', models.JSONField(blank=True, default=dict)),
                ('feature_importance', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'ML Model',
                'verbose_name_plural': 'ML Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NLPFeedbackAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_text', models.TextField()),
                ('feedback_type', models.CharField(choices=[('course_feedback', 'Course Feedback'), ('instructor_feedback', 'Instructor Feedback'), ('assignment_feedback', 'Assignment Feedback'), ('system_feedback', 'System Feedback')], max_length=50)),
                ('sentiment_score', models.FloatField(validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('sentiment_label', models.CharField(choices=[('very_negative', 'Very Negative'), ('negative', 'Negative'), ('neutral', 'Neutral'), ('positive', 'Positive'), ('very_positive', 'Very Positive')], max_length=20)),
                ('topics', models.JSONField(blank=True, default=list)),
                ('keywords', models.JSONField(blank=True, default=list)),
                ('entities', models.JSONField(blank=True, default=list)),
                ('clarity_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('constructiveness_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('specificity_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('key_insights', models.JSONField(blank=True, default=list)),
                ('suggested_actions', models.JSONField(blank=True, default=list)),
                ('analyzed_at', models.DateTimeField(auto_now_add=True)),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nlp_feedbacks', to='courses.course')),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nlp_feedbacks_as_instructor', to=settings.AUTH_USER_MODEL)),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nlp_analyses', to='ai_ml.mlmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nlp_feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'NLP Feedback Analysis',
                'verbose_name_plural': 'NLP Feedback Analyses',
                'ordering': ['-analyzed_at'],
            },
        ),
        migrations.CreateModel(
            name='IntelligentSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('schedule_type', models.CharField(choices=[('study_plan', 'Study Plan'), ('exam_preparation', 'Exam Preparation'), ('assignment_deadlines', 'Assignment Deadlines'), ('course_load', 'Course Load Optimization')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('schedule_data', models.JSONField(blank=True, default=dict)),
                ('optimization_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('workload_balance', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('deadline_pressure', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('learning_style', models.CharField(blank=True, max_length=50)),
                ('time_preferences', models.JSONField(blank=True, default=dict)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intelligent_schedules', to='ai_ml.mlmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intelligent_schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Intelligent Schedule',
                'verbose_name_plural': 'Intelligent Schedules',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('anomaly_type', models.CharField(choices=[('performance_drop', 'Performance Drop'), ('attendance_issue', 'Attendance Issue'), ('grade_anomaly', 'Grade Anomaly'), ('login_anomaly', 'Login Anomaly'), ('system_abuse', 'System Abuse'), ('data_integrity', 'Data Integrity Issue')], max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('description', models.TextField()),
                ('anomaly_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('detected_metrics', models.JSONField(blank=True, default=dict)),
                ('expected_values', models.JSONField(blank=True, default=dict)),
                ('actual_values', models.JSONField(blank=True, default=dict)),
                ('is_investigated', models.BooleanField(default=False)),
                ('investigation_notes', models.TextField(blank=True)),
                ('resolution_status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='open', max_length=20)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='anomalies', to='courses.course')),
                ('affected_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='anomalies', to=settings.AUTH_USER_MODEL)),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly_detections', to='ai_ml.mlmodel')),
            ],
            options={
                'verbose_name': 'Anomaly Detection',
                'verbose_name_plural': 'Anomaly Detections',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentPerformancePrediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('predicted_grade', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=20)),
                ('attendance_factor', models.FloatField(default=0)),
                ('assignment_factor', models.FloatField(default=0)),
                ('quiz_factor', models.FloatField(default=0)),
                ('participation_factor', models.FloatField(default=0)),
                ('previous_performance_factor', models.FloatField(default=0)),
                ('recommendations', models.JSONField(blank=True, default=list)),
                ('intervention_suggestions', models.TextField(blank=True)),
                ('prediction_date', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_predictions', to='courses.course')),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_predictions', to='ai_ml.mlmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Performance Prediction',
                'verbose_name_plural': 'Performance Predictions',
                'ordering': ['-prediction_date'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='GradingAssistance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('submission_content', models.TextField(blank=True)),
                ('ai_suggested_grade', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('confidence_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('strengths', models.JSONField(blank=True, default=list)),
                ('weaknesses', models.JSONField(blank=True, default=list)),
                ('suggestions', models.JSONField(blank=True, default=list)),
                ('content_quality_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('originality_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('completeness_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('ai_generated_feedback', models.TextField(blank=True)),
                ('feedback_quality_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grading_assistance', to='assignments.assignment')),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grading_assistance', to='ai_ml.mlmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grading_assistance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Grading Assistance',
                'verbose_name_plural': 'Grading Assistance',
                'ordering': ['-analysis_date'],
                'unique_together': {('assignment', 'student')},
            },
        ),
        migrations.CreateModel(
            name='CourseRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('confidence_level', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('interest_match', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('skill_match', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('career_alignment', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('prerequisite_satisfaction', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('peer_performance', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('reasoning', models.TextField(blank=True)),
                ('prerequisites_needed', models.JSONField(blank=True, default=list)),
                ('expected_difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('very_hard', 'Very Hard')], default='medium', max_length=20)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_enrolled', models.BooleanField(default=False)),
                ('recommendation_date', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_recommendations', to='ai_ml.mlmodel')),
                ('recommended_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course Recommendation',
                'verbose_name_plural': 'Course Recommendations',
                'ordering': ['-recommendation_score', '-recommendation_date'],
                'unique_together': {('student', 'recommended_course')},
            },
        ),
    ]
